// Copyright: This file is part of korrel8r, released under https://github.com/korrel8r/korrel8r/blob/main/LICENSE

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/korrel8r/korrel8r/pkg/korrel8r"
	"github.com/oapi-codegen/runtime"
)

// Class Names a class of objects with the same schema or structure. It has 2 parts DOMAIN:CLASS DOMAIN: name of a domain. CLASS: name of a class in the domain.
type Class = string

// Constraint Constrains the objects that will be included in search results.
type Constraint = korrel8r.Constraint

// Domain Domain configuration information.
type Domain struct {
	// Name Name of the domain.
	Name string `json:"name"`

	// Stores Stores configured for the domain.
	Stores []Store `json:"stores,omitempty"`
}

// Duration The duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are: ns, us (or Âµs), ms, s, m, h.
type Duration = time.Duration

// Edge Directed edge in the result graph, from Start to Goal classes.
type Edge struct {
	// Goal Class name of the goal node.
	Goal Class `json:"goal"`

	// Rules Set of rules followed along this edge.
	Rules []Rule `json:"rules,omitempty"`

	// Start Class name of the start node.
	Start Class `json:"start"`
}

// Error Error result containing an error message.
type Error struct {
	// Error Error message.
	Error string `json:"error"`
}

// Goals Starting point for a goals search.
type Goals struct {
	// Goals Goal classes for correlation.
	Goals []Class `json:"goals"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Graph Graph resulting from a correlation search.
type Graph struct {
	// Edges List of graph edges.
	Edges []Edge `json:"edges,omitempty"`

	// Nodes List of graph nodes.
	Nodes []Node `json:"nodes,omitempty"`
}

// GraphOptions Options controlling the form of the returned graph.
type GraphOptions struct {
	// Errors if true include non-fatal error messages.
	Errors *bool `json:"errors,omitempty"`

	// Rules If true include rule names in graph edges.
	Rules *bool `json:"rules,omitempty"`
}

// Neighbours Starting point for a neighbours search.
type Neighbours struct {
	// Depth Max depth of neighbours graph.
	Depth int `json:"depth"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Node Node in the result graph, contains results for a single class.
type Node struct {
	// Class Full class name
	Class string `json:"class"`

	// Count Number of results for this class, after de-duplication.
	Count *int `json:"count,omitempty"`

	// Queries Queries yielding results for this class.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Query Represents a request to retrieve data for a particular Class. It has 3 parts DOMAIN:CLASS:SELECTOR DOMAIN: name of a domain. CLASS: name of a class in the domain. SELECTOR: domain-specific query string to retrieve selected objects.
type Query = string

// QueryCount Query with number of results.
type QueryCount struct {
	// Count Number of results, omitted if the query was not executed.
	Count *int `json:"count,omitempty"`

	// Query Query for correlation data.
	Query Query `json:"query"`
}

// Rule Rule is a correlation rule with a list of queries and results counts found during navigation.
type Rule struct {
	// Name Name is an optional descriptive name.
	Name string `json:"name"`

	// Queries Queries generated while following this rule.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Start Start identifies a set of starting objects for correlation.
type Start struct {
	// Class Class of starting objects and queries.
	Class Class `json:"class,omitempty"`

	// Constraint Constrain the objects that will be returned.
	Constraint *Constraint `json:"constraint,omitempty"`

	// Objects Objects serialized as JSON.
	Objects []json.RawMessage `json:"objects,omitempty"`

	// Queries Queries for starting objects
	Queries []Query `json:"queries,omitempty"`
}

// Store Store is a map string keys and values used to connect to a store.
type Store map[string]string

// SetConfigParams defines parameters for SetConfig.
type SetConfigParams struct {
	// Verbose Verbose setting for logging.
	Verbose *int `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// GraphGoalsParams defines parameters for GraphGoals.
type GraphGoalsParams struct {
	Options *GraphOptions `form:"options,omitempty" json:"options,omitempty"`
}

// GraphNeighboursParams defines parameters for GraphNeighbours.
type GraphNeighboursParams struct {
	Options *GraphOptions `form:"options,omitempty" json:"options,omitempty"`
}

// QueryParams defines parameters for Query.
type QueryParams struct {
	// Query Query string.
	Query Query `form:"query" json:"query"`
}

// GraphGoalsJSONRequestBody defines body for GraphGoals for application/json ContentType.
type GraphGoalsJSONRequestBody = Goals

// GraphNeighboursJSONRequestBody defines body for GraphNeighbours for application/json ContentType.
type GraphNeighboursJSONRequestBody = Neighbours

// ListGoalsJSONRequestBody defines body for ListGoals for application/json ContentType.
type ListGoalsJSONRequestBody = Goals

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Change configuration settings at runtime.
	// (PUT /config)
	SetConfig(c *gin.Context, params SetConfigParams)
	// Get the list of correlation domains.
	// (GET /domains)
	ListDomains(c *gin.Context)
	// Create a correlation graph from start objects to goal queries.
	// (POST /graphs/goals)
	GraphGoals(c *gin.Context, params GraphGoalsParams)
	// Create a neighbourhood graph around a start object to a given depth.
	// (POST /graphs/neighbours)
	GraphNeighbours(c *gin.Context, params GraphNeighboursParams)
	// Create a list of goal nodes related to a starting point.
	// (POST /lists/goals)
	ListGoals(c *gin.Context)
	// Execute a query, returns a list of JSON objects.
	// (GET /objects)
	Query(c *gin.Context, params QueryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SetConfig operation middleware
func (siw *ServerInterfaceWrapper) SetConfig(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetConfigParams

	// ------------- Optional query parameter "verbose" -------------

	err = runtime.BindQueryParameter("form", true, false, "verbose", c.Request.URL.Query(), &params.Verbose)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter verbose: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetConfig(c, params)
}

// ListDomains operation middleware
func (siw *ServerInterfaceWrapper) ListDomains(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDomains(c)
}

// GraphGoals operation middleware
func (siw *ServerInterfaceWrapper) GraphGoals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphGoalsParams

	// ------------- Optional query parameter "options" -------------

	err = runtime.BindQueryParameter("form", true, false, "options", c.Request.URL.Query(), &params.Options)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter options: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphGoals(c, params)
}

// GraphNeighbours operation middleware
func (siw *ServerInterfaceWrapper) GraphNeighbours(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphNeighboursParams

	// ------------- Optional query parameter "options" -------------

	err = runtime.BindQueryParameter("form", true, false, "options", c.Request.URL.Query(), &params.Options)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter options: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphNeighbours(c, params)
}

// ListGoals operation middleware
func (siw *ServerInterfaceWrapper) ListGoals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGoals(c)
}

// Query operation middleware
func (siw *ServerInterfaceWrapper) Query(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryParams

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument query is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/config", wrapper.SetConfig)
	router.GET(options.BaseURL+"/domains", wrapper.ListDomains)
	router.POST(options.BaseURL+"/graphs/goals", wrapper.GraphGoals)
	router.POST(options.BaseURL+"/graphs/neighbours", wrapper.GraphNeighbours)
	router.POST(options.BaseURL+"/lists/goals", wrapper.ListGoals)
	router.GET(options.BaseURL+"/objects", wrapper.Query)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//442/m88LQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
