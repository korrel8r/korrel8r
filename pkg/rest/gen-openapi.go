// Copyright: This file is part of korrel8r, released under https://github.com/korrel8r/korrel8r/blob/main/LICENSE

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/korrel8r/korrel8r/pkg/korrel8r"
	"github.com/oapi-codegen/runtime"
)

// Class Names a class of objects with the same schema or structure. It has 2 parts DOMAIN:CLASS DOMAIN: name of a domain. CLASS: name of a class in the domain.
type Class = string

// Constraint Constrains the objects that will be included in search results.
type Constraint = korrel8r.Constraint

// Domain Domain configuration information.
type Domain struct {
	// Name Name of the domain.
	Name string `json:"name"`

	// Stores Stores configured for the domain.
	Stores []Store `json:"stores,omitempty"`
}

// Duration The duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are: ns, us (or Âµs), ms, s, m, h.
type Duration = time.Duration

// Edge Directed edge in the result graph, from Start to Goal classes.
type Edge struct {
	// Goal Class name of the goal node.
	Goal Class `json:"goal"`

	// Rules Set of rules followed along this edge.
	Rules []Rule `json:"rules,omitempty"`

	// Start Class name of the start node.
	Start Class `json:"start"`
}

// Error Error result containing an error message.
type Error struct {
	// Error Error message.
	Error string `json:"error"`
}

// Goals Starting point for a goals search.
type Goals struct {
	// Goals Goal classes for correlation.
	Goals []Class `json:"goals"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Graph Graph resulting from a correlation search.
type Graph struct {
	// Edges List of graph edges.
	Edges []Edge `json:"edges,omitempty"`

	// Nodes List of graph nodes.
	Nodes []Node `json:"nodes,omitempty"`
}

// Neighbours Starting point for a neighbours search.
type Neighbours struct {
	// Depth Max depth of neighbours graph.
	Depth int `json:"depth"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Node Node in the result graph, contains results for a single class.
type Node struct {
	// Class Full class name
	Class string `json:"class"`

	// Count Number of results for this class, after de-duplication.
	Count *int `json:"count,omitempty"`

	// Queries Queries yielding results for this class.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Query Represents a request to retrieve data for a particular Class. It has 3 parts DOMAIN:CLASS:SELECTOR DOMAIN: name of a domain. CLASS: name of a class in the domain. SELECTOR: domain-specific query string to retrieve selected objects.
type Query = string

// QueryCount Query with number of results.
type QueryCount struct {
	// Count Number of results, omitted if the query was not executed.
	Count *int `json:"count,omitempty"`

	// Query Query for correlation data.
	Query Query `json:"query"`
}

// Rule Rule is a correlation rule with a list of queries and results counts found during navigation.
type Rule struct {
	// Name Name is an optional descriptive name.
	Name string `json:"name"`

	// Queries Queries generated while following this rule.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Start Start identifies a set of starting objects for correlation.
type Start struct {
	// Class Class of starting objects and queries.
	Class Class `json:"class,omitempty"`

	// Constraint Constrain the objects that will be returned.
	Constraint *Constraint `json:"constraint,omitempty"`

	// Objects Objects serialized as JSON.
	Objects []json.RawMessage `json:"objects,omitempty"`

	// Queries Queries for starting objects
	Queries []Query `json:"queries,omitempty"`
}

// Store Store is a map string keys and values used to connect to a store.
type Store map[string]string

// SetConfigParams defines parameters for SetConfig.
type SetConfigParams struct {
	// Verbose Verbose setting for logging.
	Verbose *int `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// GraphGoalsParams defines parameters for GraphGoals.
type GraphGoalsParams struct {
	// Rules Include rules in graph edges.
	Rules *bool `form:"rules,omitempty" json:"rules,omitempty"`
}

// GraphNeighboursParams defines parameters for GraphNeighbours.
type GraphNeighboursParams struct {
	// Rules Include rules in graph edges.
	Rules *bool `form:"rules,omitempty" json:"rules,omitempty"`
}

// QueryParams defines parameters for Query.
type QueryParams struct {
	// Query Query string.
	Query Query `form:"query" json:"query"`
}

// GraphGoalsJSONRequestBody defines body for GraphGoals for application/json ContentType.
type GraphGoalsJSONRequestBody = Goals

// GraphNeighboursJSONRequestBody defines body for GraphNeighbours for application/json ContentType.
type GraphNeighboursJSONRequestBody = Neighbours

// ListGoalsJSONRequestBody defines body for ListGoals for application/json ContentType.
type ListGoalsJSONRequestBody = Goals

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Change configuration settings at runtime.
	// (PUT /config)
	SetConfig(c *gin.Context, params SetConfigParams)
	// Get the list of correlation domains.
	// (GET /domains)
	ListDomains(c *gin.Context)
	// Create a correlation graph from start objects to goal queries.
	// (POST /graphs/goals)
	GraphGoals(c *gin.Context, params GraphGoalsParams)
	// Create a neighbourhood graph around a start object to a given depth.
	// (POST /graphs/neighbours)
	GraphNeighbours(c *gin.Context, params GraphNeighboursParams)
	// Create a list of goal nodes related to a starting point.
	// (POST /lists/goals)
	ListGoals(c *gin.Context)
	// Execute a query, returns a list of JSON objects.
	// (GET /objects)
	Query(c *gin.Context, params QueryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SetConfig operation middleware
func (siw *ServerInterfaceWrapper) SetConfig(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetConfigParams

	// ------------- Optional query parameter "verbose" -------------

	err = runtime.BindQueryParameter("form", true, false, "verbose", c.Request.URL.Query(), &params.Verbose)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter verbose: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetConfig(c, params)
}

// ListDomains operation middleware
func (siw *ServerInterfaceWrapper) ListDomains(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDomains(c)
}

// GraphGoals operation middleware
func (siw *ServerInterfaceWrapper) GraphGoals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphGoalsParams

	// ------------- Optional query parameter "rules" -------------

	err = runtime.BindQueryParameter("form", true, false, "rules", c.Request.URL.Query(), &params.Rules)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rules: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphGoals(c, params)
}

// GraphNeighbours operation middleware
func (siw *ServerInterfaceWrapper) GraphNeighbours(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphNeighboursParams

	// ------------- Optional query parameter "rules" -------------

	err = runtime.BindQueryParameter("form", true, false, "rules", c.Request.URL.Query(), &params.Rules)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rules: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphNeighbours(c, params)
}

// ListGoals operation middleware
func (siw *ServerInterfaceWrapper) ListGoals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGoals(c)
}

// Query operation middleware
func (siw *ServerInterfaceWrapper) Query(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryParams

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument query is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/config", wrapper.SetConfig)
	router.GET(options.BaseURL+"/domains", wrapper.ListDomains)
	router.POST(options.BaseURL+"/graphs/goals", wrapper.GraphGoals)
	router.POST(options.BaseURL+"/graphs/neighbours", wrapper.GraphNeighbours)
	router.POST(options.BaseURL+"/lists/goals", wrapper.ListGoals)
	router.GET(options.BaseURL+"/objects", wrapper.Query)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa7XLcthV9lTtoZ5JMubuS7DYZ/nMlVaPElhzLzY+67gyWvOQiBgEGAFfaavax+gJ9",
	"ss4FSC53iZVXtpLMdPzHs+IHcHFxzsG5l75nma5qrVA5y9J7ZrMFVtz/PJXc+h852syI2gmtWMqueIUW",
	"OGR0G3QBev4zZs7CrXALcAsEyyuEMBBoA9aZJnONwSlcOlhwCydQc+MsnF2/enF5lZ6+fHFz0/0Bit7W",
	"BXDIdcWFmoK/P7wRphbKz9Y+9U/FEoZ3vKolspQ5wzNMbc3pcs2dQ0PBv/tX+v5Pqf+XJcytanrWOiNU",
	"yRJ2Nyn1hC5O7AdRT7RfMpeTWgvl0LDUmQbXCTvVyjrDhXLj9PT3rI+uS45bcAe3QkqYIwiVySbHnJZg",
	"kZtsAQZtI52dUrRG12icQJ98VPl4kstSaYM7mRcVWser2gIvHBpwC2EBVe7vTLeyc3J0/O3k6NvJyfHb",
	"42/TZyfpyXfT42fPj0+eHf+DJazQpuKOpSznDif0+ihZ64RJUYlIAl7SZXDacQmqqeZohiCp0cAvDZrV",
	"dDMkJbdEQ2Nax4179HrnWNBtv2A/Qr/kw1ZC13Xj5+VSXhcsfXfP/miwYCn7w2xDkFnLjtlZY7gPbf0+",
	"2Qn1QiwRmhq0AoO/NGhp8zXk3HGwThu0IAqCxgoc/4AgtSr9ZnEVFpC3Y0/Zet3HGlY+hChL2QdtDMrv",
	"zHSAx3XCzjwhxkkM1yHTqhBlOwkIFVLkJ9zFHjEuLgC0pQPyxZIaFjt+/SYkoQsDcyi02RlMOKz8qw9t",
	"gh+IbXLEjeGrg1m8ThjtjzCYs/RdWOr73XxTNrutHi3kLYXc5TGsGwQpo6V9V5lPUo6ZqHom2ASQZ4sA",
	"4C4wKAzP/CBc5cChUcKBbYpC3E3hJy5FYLC/boEbTEHZBBoLX2sD//2P/SaByiZgE6gSWOwq4cni+Z+r",
	"LSp0K3pAAElBiUIboCfsPC8jaDgTBjOHOWBeYqfJQc2gNLxeJFAYXcFN4KWGC81lUHCMyF2puTych+GI",
	"GpPQX+8PDIqIxgWlc5zSUkwjo9BER8/7u1BoKfUt5sCJoq2a5iUejM83jfxkeNJjuqJparfqz51eHZ86",
	"O0E02/TsMCNMmoSdiTHk3Bhtxsn0lzskZFo5LhRRhCtAf6tCa3nI586R99CAg7d2JGcn7jBKLGBCYFSY",
	"uHEUod8Jr0rc48a2h3QcrZGRhhD342ReqXuV7cn5jn34zqavdU5xHgSqdk8/UfQGEHpYWemh3YSGxXZD",
	"RBNLfI+kgy63SKD8ej3gw6TsTTARzsY8hvVM9QLjWWkPpqWXsU9PIJHkoxH5hw6O6Ernn3WOjfbhCkW5",
	"mOvGHIpy1b+wdydyrF1kb1/xO/C3aPGDYXwePuLxHg/BEMRDEPS5HFsWne85m1phsp0BbxNihSolBg6P",
	"c5HFK6O/NbKlvRfXmCnKdBMrGq56nzwMwx85fryktfQ5TvKmliLrpWScXnLXIgbRH8MNWAmUOSEgPtfB",
	"sKXxVqd+QU9kwkJeY9vq5xov6Q3WBi1FBbyz2+QxDDojcInBdoctpZJTZI3kBryI9tXos0g1mt6cvzw/",
	"fXv95nPLUugGStsrE1tjJgqRhTKoM47DoC3KYKnaemfX0bVnRnpPU9uaCl0otE58KCnMuUlA8jlKm8I9",
	"8BTmsE6goG33V7IUcliv9xXGn10eD4ARBeEq+F+1C/oI0Q6kSwJklihlobZqc3vLLSjtAO8waxzm+wmz",
	"OtxVBSiOXVVY2c5p7wE49lRhyhjQvWkc47yRGGqL4djkU0MqOcj2/GnZ70uJjt8+i0TzRuVUsRDeFF+K",
	"8vFlH8WgNpVL/8QSPfiiheBHBalEhYbT7t0uhMTWeYvOdNMyf0dR2lsZ3sR7FaHQETkqJwq/FWBDXWG7",
	"o7frY0Ss4Z6D5ikMfywCgkm7P9NHMDzbaoAdGNygSTGOsLu5v2lm0DVGEYnXSbsLEUxdt69aNIJL8W+q",
	"3yx8f3N9tQUhnucirO31IOGh8nqo5fKz1Wr6ht++ClXIZ/jIj7Ki8K3T7f16FAue1FKGZsvezN2PaR/p",
	"+gQJq3jdnXofcBUwuOSyQQuNxZyOwkwrhZk/ytuu2UBZuqAoTryj84vLM51FUvlD2yCDv1s0cNGInExZ",
	"YyRL2cK52qazWd9EK4VbNPOp0P2lGS1DqEKHo0g5nrmNPrLXRlMg0M0yGrodMdPVZsjuxzhDF60KBmdq",
	"wS6CBg4EwsIc3S2iImnXjclaoddzi2bJ50IKtwIrSkVFq1DekzTWoaH0SZGhsjhYwYuaZwuEk+nRo2Kf",
	"zaWez8jMzF5enp5f3ZyHJqrz7qRP+pvzm7fw4vUlS9gSjQ2rXB5zWS/4sSdxjYrXgqXs2fRoehz8yMLv",
	"4yy0B+ln3URE9pXORbHaOKXtpqZFR6yx8DVOyylIXcISzVxb4VbfgKa8mEb5bgQlTmQYLBbh2Y9wmYdu",
	"0GmIggIzvEKHVFG92w3mJz82dtN65kpdlkKVXnTomXDiJ13mQziExkBZWmHF70TVVCw9PkpYJVT442hs",
	"WUg+DdpaKxu4d3J0FFHCH7ztsE1VcfI37HTBVYn7UsUd5aTrmzteWu/Iuy4te0+DzYKHDb0PdDFDTiJt",
	"B4akh0P7qgds6DnF+sC+PTr8pLO9J1Rmn7UxxJNAPMX2XKr7UmlGwr35vkW/DhLStpf+yUo6YjntSsKe",
	"PzLWB/sZvs8VmUqopW8eD7Drp37+60/d1tjkvb3r3EHiBToPgQ4jW4Y57O4QhK1b9gAM4jjrG2+1tjEP",
	"5mus1Y716k7RhCxBZ5TplN14hc0TvhVf9o28KWygHXo8w5amlOClCyTyfNDiGk4bDjM/YrgQw7dvlV20",
	"jbYHRecyfENsm9VCjXphEdUJbe+h5uRY8EY6lhZc2o33mWstkatOanxd/Vedr54MOWGJEeTchM+hPn+2",
	"+2RQ7nwy2Njz1kx9lhA8GKfvaO7l8cnRX379qbygmKZ2mCehi8FlW9t90RJ2apBM03ZlHLgwAFFfUbRg",
	"GtQ8m6MuvO+LvbtJpnMsUU1a9E/mOl9NOh6Fa2yoSGqr5/rrylJouHafTduZzULrvGvfjtRKFwOV8j2D",
	"tmtrQKINX7Z25GsruL1iNeg1/18r1mCdB8kW7c4GE19U64tqRVWrh4hnb2AEN75TF7UPYokqUPcptIsM",
	"2O9spjoPSOrUqfTwm31oqvtOUMZVaARR1ZrHPNa+kqFzVL+plbEfszJPrgm/wdfGLwXNg3Tu0Nz/dxML",
	"gZh518safn19CgoPOqHRivw8fPvYfNPsC/Kv/Fn7VfupgPi4VZSNiRyWPoUzjeG7So2m0KYCrlZb9iv8",
	"d6aoZ/ixPd8fdAo/Dr6M7XMG3Z/bDEoO3Oi2Qbqvk/J4xh3eUP5CvSel3gbfHhFJC+Xh0fL9zfVV72Nj",
	"fQUaEM2yA2PohM54LWabduX79f8CAAD//z4UeMwrLQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
