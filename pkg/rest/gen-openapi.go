// Copyright: This file is part of korrel8r, released under https://github.com/korrel8r/korrel8r/blob/main/LICENSE

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/korrel8r/korrel8r/pkg/korrel8r"
	"github.com/oapi-codegen/runtime"
)

// Class Names a class of objects with the same schema or structure. It has 2 parts DOMAIN:CLASS DOMAIN: name of a domain. CLASS: name of a class in the domain.
type Class = string

// Constraint Constrains the objects that will be included in search results.
type Constraint = korrel8r.Constraint

// Domain Domain configuration information.
type Domain struct {
	// Name Name of the domain.
	Name string `json:"name"`

	// Stores Stores configured for the domain.
	Stores []Store `json:"stores,omitempty"`
}

// Duration The duration string is a sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are: ns, us (or Âµs), ms, s, m, h.
type Duration = time.Duration

// Edge Directed edge in the result graph, from Start to Goal classes.
type Edge struct {
	// Goal Class name of the goal node.
	Goal Class `json:"goal"`

	// Rules Set of rules followed along this edge.
	Rules []Rule `json:"rules,omitempty"`

	// Start Class name of the start node.
	Start Class `json:"start"`
}

// Error Error result containing an error message.
type Error struct {
	// Error Error message.
	Error string `json:"error"`
}

// Goals Starting point for a goals search.
type Goals struct {
	// Goals Goal classes for correlation.
	Goals []Class `json:"goals"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Graph Graph resulting from a correlation search.
type Graph struct {
	// Edges List of graph edges.
	Edges []Edge `json:"edges,omitempty"`

	// Nodes List of graph nodes.
	Nodes []Node `json:"nodes,omitempty"`
}

// GraphOptions Options controlling the form of the returned graph.
type GraphOptions struct {
	// Errors if true include non-fatal error messages.
	Errors *bool `json:"errors,omitempty"`

	// Rules If true include rule names in graph edges.
	Rules *bool `json:"rules,omitempty"`

	// Zeros if true include queries that returned no results.
	Zeros *bool `json:"zeros,omitempty"`
}

// Neighbours Starting point for a neighbours search.
type Neighbours struct {
	// Depth Max depth of neighbours graph.
	Depth int `json:"depth"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Node Node in the result graph, contains results for a single class.
type Node struct {
	// Class Full class name
	Class string `json:"class"`

	// Count Number of results for this class, after de-duplication.
	Count *int `json:"count,omitempty"`

	// Queries Queries yielding results for this class.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Query Represents a request to retrieve data for a particular Class. It has 3 parts DOMAIN:CLASS:SELECTOR DOMAIN: name of a domain. CLASS: name of a class in the domain. SELECTOR: domain-specific query string to retrieve selected objects.
type Query = string

// QueryCount Query with number of results.
type QueryCount struct {
	// Count Number of results, omitted if the query was not executed.
	Count *int `json:"count,omitempty"`

	// Query Query for correlation data.
	Query Query `json:"query"`
}

// Rule Rule is a correlation rule with a list of queries and results counts found during navigation.
type Rule struct {
	// Name Name is an optional descriptive name.
	Name string `json:"name"`

	// Queries Queries generated while following this rule.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Start Start identifies a set of starting objects for correlation.
type Start struct {
	// Class Class of starting objects and queries.
	Class Class `json:"class,omitempty"`

	// Constraint Constrain the objects that will be returned.
	Constraint *Constraint `json:"constraint,omitempty"`

	// Objects Objects serialized as JSON.
	Objects []json.RawMessage `json:"objects,omitempty"`

	// Queries Queries for starting objects
	Queries []Query `json:"queries,omitempty"`
}

// Store Store is a map string keys and values used to connect to a store.
type Store map[string]string

// SetConfigParams defines parameters for SetConfig.
type SetConfigParams struct {
	// Verbose Verbose setting for logging.
	Verbose *int `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// GraphGoalsParams defines parameters for GraphGoals.
type GraphGoalsParams struct {
	Options *GraphOptions `form:"options,omitempty" json:"options,omitempty"`
}

// GraphNeighboursParams defines parameters for GraphNeighbours.
type GraphNeighboursParams struct {
	Options *GraphOptions `form:"options,omitempty" json:"options,omitempty"`
}

// QueryParams defines parameters for Query.
type QueryParams struct {
	// Query Query string.
	Query Query `form:"query" json:"query"`
}

// GraphGoalsJSONRequestBody defines body for GraphGoals for application/json ContentType.
type GraphGoalsJSONRequestBody = Goals

// GraphNeighboursJSONRequestBody defines body for GraphNeighbours for application/json ContentType.
type GraphNeighboursJSONRequestBody = Neighbours

// ListGoalsJSONRequestBody defines body for ListGoals for application/json ContentType.
type ListGoalsJSONRequestBody = Goals

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Change configuration settings at runtime.
	// (PUT /config)
	SetConfig(c *gin.Context, params SetConfigParams)
	// Get the list of correlation domains.
	// (GET /domains)
	ListDomains(c *gin.Context)
	// Create a correlation graph from start objects to goal queries.
	// (POST /graphs/goals)
	GraphGoals(c *gin.Context, params GraphGoalsParams)
	// Create a neighbourhood graph around a start object to a given depth.
	// (POST /graphs/neighbours)
	GraphNeighbours(c *gin.Context, params GraphNeighboursParams)
	// Create a list of goal nodes related to a starting point.
	// (POST /lists/goals)
	ListGoals(c *gin.Context)
	// Execute a query, returns a list of JSON objects.
	// (GET /objects)
	Query(c *gin.Context, params QueryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SetConfig operation middleware
func (siw *ServerInterfaceWrapper) SetConfig(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetConfigParams

	// ------------- Optional query parameter "verbose" -------------

	err = runtime.BindQueryParameter("form", true, false, "verbose", c.Request.URL.Query(), &params.Verbose)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter verbose: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetConfig(c, params)
}

// ListDomains operation middleware
func (siw *ServerInterfaceWrapper) ListDomains(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDomains(c)
}

// GraphGoals operation middleware
func (siw *ServerInterfaceWrapper) GraphGoals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphGoalsParams

	// ------------- Optional query parameter "options" -------------

	err = runtime.BindQueryParameter("form", true, false, "options", c.Request.URL.Query(), &params.Options)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter options: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphGoals(c, params)
}

// GraphNeighbours operation middleware
func (siw *ServerInterfaceWrapper) GraphNeighbours(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphNeighboursParams

	// ------------- Optional query parameter "options" -------------

	err = runtime.BindQueryParameter("form", true, false, "options", c.Request.URL.Query(), &params.Options)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter options: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphNeighbours(c, params)
}

// ListGoals operation middleware
func (siw *ServerInterfaceWrapper) ListGoals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGoals(c)
}

// Query operation middleware
func (siw *ServerInterfaceWrapper) Query(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryParams

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument query is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/config", wrapper.SetConfig)
	router.GET(options.BaseURL+"/domains", wrapper.ListDomains)
	router.POST(options.BaseURL+"/graphs/goals", wrapper.GraphGoals)
	router.POST(options.BaseURL+"/graphs/neighbours", wrapper.GraphNeighbours)
	router.POST(options.BaseURL+"/lists/goals", wrapper.ListGoals)
	router.GET(options.BaseURL+"/objects", wrapper.Query)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
