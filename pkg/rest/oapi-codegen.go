// Copyright: This file is part of korrel8r, released under https://github.com/korrel8r/korrel8r/blob/main/LICENSE

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Constraint Constrains the objects that will be included in search results.
type Constraint struct {
	// End End of time interval.
	End *time.Time `json:"end,omitempty"`

	// Limit Limit number of objects returned per query.
	Limit *int `json:"limit,omitempty"`

	// Start Start of time interval.
	Start *time.Time `json:"start,omitempty"`

	// Timeout Timeout per request, h/m/s/ms/ns format
	Timeout *time.Duration `json:"timeout,omitempty"`
}

// Domain Domain configuration information.
type Domain struct {
	// Name Name of the domain.
	Name string `json:"name"`

	// Stores Stores configured for the domain.
	Stores []Store `json:"stores,omitempty"`
}

// Edge Directed edge in the result graph, from Start to Goal classes.
type Edge struct {
	// Goal Class name of the goal node.
	Goal string `json:"goal"`

	// Rules Set of rules followed along this edge.
	Rules []Rule `json:"rules,omitempty"`

	// Start Class name of the start node.
	Start string `json:"start"`
}

// Error Error result containing an error message.
type Error struct {
	// Error Error message.
	Error string `json:"error"`
}

// Goals Starting point for a goals search.
type Goals struct {
	// Goals Goal classes for correlation.
	Goals []string `json:"goals"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Graph Graph resulting from a correlation search.
type Graph struct {
	// Edges List of graph edges.
	Edges []Edge `json:"edges,omitempty"`

	// Nodes List of graph nodes.
	Nodes []Node `json:"nodes,omitempty"`
}

// Neighbours Starting point for a neighbours search.
type Neighbours struct {
	// Depth Max depth of neighbours graph.
	Depth int `json:"depth"`

	// Start Start identifies a set of starting objects for correlation.
	Start Start `json:"start"`
}

// Node Node in the result graph, contains results for a single class.
type Node struct {
	// Class Full class name
	Class string `json:"class"`

	// Count Number of results for this class, after de-duplication.
	Count *int `json:"count,omitempty"`

	// Queries Queries yielding results for this class.
	Queries []QueryCount `json:"queries,omitempty"`
}

// QueryCount Query with number of results.
type QueryCount struct {
	// Count Number of results, omitted if the query was not executed.
	Count *int `json:"count,omitempty"`

	// Query Query for correlation data.
	Query string `json:"query"`
}

// Rule Rule is a correlation rule with a list of queries and results counts found during navigation.
type Rule struct {
	// Name Name is an optional descriptive name.
	Name string `json:"name"`

	// Queries Queries generated while following this rule.
	Queries []QueryCount `json:"queries,omitempty"`
}

// Start Start identifies a set of starting objects for correlation.
type Start struct {
	// Class Class of starting objects and queries.
	Class string `json:"class,omitempty"`

	// Constraint Constrains the objects that will be included in search results.
	Constraint *Constraint `json:"constraint,omitempty"`

	// Objects Objects serialized as JSON.
	Objects []json.RawMessage `json:"objects,omitempty"`

	// Queries Queries for starting objects
	Queries []string `json:"queries,omitempty"`
}

// Store Store is a map of name:value attributes used to connect to a store.
type Store map[string]string

// SetConfigParams defines parameters for SetConfig.
type SetConfigParams struct {
	// Verbose Verbose setting for logging.
	Verbose *int `form:"verbose,omitempty" json:"verbose,omitempty"`
}

// GraphGoalsParams defines parameters for GraphGoals.
type GraphGoalsParams struct {
	// Rules include rules in graph edges
	Rules *bool `form:"rules,omitempty" json:"rules,omitempty"`
}

// GraphNeighboursParams defines parameters for GraphNeighbours.
type GraphNeighboursParams struct {
	// Rules include rules in graph edges
	Rules *bool `form:"rules,omitempty" json:"rules,omitempty"`
}

// QueryParams defines parameters for Query.
type QueryParams struct {
	// Query query string
	Query string `form:"query" json:"query"`
}

// GraphGoalsJSONRequestBody defines body for GraphGoals for application/json ContentType.
type GraphGoalsJSONRequestBody = Goals

// GraphNeighboursJSONRequestBody defines body for GraphNeighbours for application/json ContentType.
type GraphNeighboursJSONRequestBody = Neighbours

// ListGoalsJSONRequestBody defines body for ListGoals for application/json ContentType.
type ListGoalsJSONRequestBody = Goals

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Change configuration settings at runtime.
	// (PUT /config)
	SetConfig(c *gin.Context, params SetConfigParams)
	// Get the list of correlation domains.
	// (GET /domains)
	ListDomains(c *gin.Context)
	// Create a correlation graph from start objects to goal queries.
	// (POST /graphs/goals)
	GraphGoals(c *gin.Context, params GraphGoalsParams)
	// Create a neighbourhood graph around a start object to a given depth.
	// (POST /graphs/neighbours)
	GraphNeighbours(c *gin.Context, params GraphNeighboursParams)
	// Create a list of goal nodes related to a starting point.
	// (POST /lists/goals)
	ListGoals(c *gin.Context)
	// Execute a query, returns a list of JSON objects.
	// (GET /objects)
	Query(c *gin.Context, params QueryParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// SetConfig operation middleware
func (siw *ServerInterfaceWrapper) SetConfig(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetConfigParams

	// ------------- Optional query parameter "verbose" -------------

	err = runtime.BindQueryParameter("form", true, false, "verbose", c.Request.URL.Query(), &params.Verbose)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter verbose: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetConfig(c, params)
}

// ListDomains operation middleware
func (siw *ServerInterfaceWrapper) ListDomains(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListDomains(c)
}

// GraphGoals operation middleware
func (siw *ServerInterfaceWrapper) GraphGoals(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphGoalsParams

	// ------------- Optional query parameter "rules" -------------

	err = runtime.BindQueryParameter("form", true, false, "rules", c.Request.URL.Query(), &params.Rules)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rules: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphGoals(c, params)
}

// GraphNeighbours operation middleware
func (siw *ServerInterfaceWrapper) GraphNeighbours(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GraphNeighboursParams

	// ------------- Optional query parameter "rules" -------------

	err = runtime.BindQueryParameter("form", true, false, "rules", c.Request.URL.Query(), &params.Rules)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter rules: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GraphNeighbours(c, params)
}

// ListGoals operation middleware
func (siw *ServerInterfaceWrapper) ListGoals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGoals(c)
}

// Query operation middleware
func (siw *ServerInterfaceWrapper) Query(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params QueryParams

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument query is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Query(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.PUT(options.BaseURL+"/config", wrapper.SetConfig)
	router.GET(options.BaseURL+"/domains", wrapper.ListDomains)
	router.POST(options.BaseURL+"/graphs/goals", wrapper.GraphGoals)
	router.POST(options.BaseURL+"/graphs/neighbours", wrapper.GraphNeighbours)
	router.POST(options.BaseURL+"/lists/goals", wrapper.ListGoals)
	router.GET(options.BaseURL+"/objects", wrapper.Query)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
