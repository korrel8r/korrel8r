version: v2beta1
name: korrel8r

functions:
  # Scale down COO so it doesn't fight over the korrel8r deployment
  scale_down_coo: kubectl scale --replicas=0 -n ${DEVSPACE_NAMESPACE} deployment/korrel8r
  scale_up_coo:   kubectl scale --replicas=1 -n ${DEVSPACE_NAMESPACE} deployment/korrel8r

# This is a list of `pipelines` that DevSpace can execute (you can define your own)
pipelines:
  # This is the pipeline for the main command: `devspace dev` (or `devspace run-pipeline dev`)
  dev:
    run: |-
      scale_down_coo
      start_dev app                # Start dev mode "app" (see "dev" section)

  # Pipelilne to return to norml: `devspace purge`
  purge:
    run: |-
      stop_dev --all
      scale_up_coo
vars:
  IMAGE_DEVSPACE:
    default: ${REGISTRY_BASE}/korrel8r-devspace:latest
dev:
  # app container replaces the COO's korrel8r deployment with an auto-rebuild container.
  # Changes to the local source are synced and cause a rebuild and restart of the container.
  app:
    # Find the korrel8r container by label selector.
    labelSelector: { app.kubernetes.io/instance: korrel8r }
    container: korrel8r
    # Sync files necessary for auto-rebuild
    sync:
      - path: './:/src'
        excludePaths:
          - '**'
          - '!/Makefile'
          - '!/go.mod'
          - '!/go.sum'
          - '!/cmd'
          - '!/pkg'
          - '!/internal'
          - '!/etc'
        startContainer: true
        waitInitialSync: true

    devImage: ${IMAGE_DEVSPACE}
    command: ["gow", "run", "./cmd/korrel8r", "web", "-c", "./etc/korrel8r/openshift-svc.yaml", "-v3"]

    # Forward the ports to be able access your application via localhost
    ports:
      - port: "8080"

    # Inject a lightweight SSH server into the container (so your IDE can connect to the remote dev env
    ssh:
      enabled: true

    logs:
      enabled: true
